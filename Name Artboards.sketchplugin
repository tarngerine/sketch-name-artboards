// Name Artboards v1.2 â€” Julius Tarng

var groupName = 'Artboard labels'
var artboards = [[doc currentPage] artboards];

// Remove any previous existing Artboard labels group
allLayers = [[doc currentPage] layers];
for(var i=0; i< allLayers.length(); i++){
  var layer = [allLayers objectAtIndex:i];
  if ([layer name] == groupName) {
    [layer removeFromParent];
  }
}

// Query resolution for appropriate font size and spacings
function createSelect(msg, items, selectedItemIndex){
  selectedItemIndex = selectedItemIndex || 0

  var accessory = [[NSView alloc] initWithFrame:NSMakeRect(0,0,200,62)]

  var combobox = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,37,200,25)]
  [combobox addItemsWithObjectValues:items]
  [combobox selectItemAtIndex:selectedItemIndex]

  var checkbox = [[NSButton alloc] initWithFrame:NSMakeRect(0,0,200,25)]
  [checkbox setButtonType:NSSwitchButton]
  [checkbox setTitle:@"Draw Slice"]
  [checkbox setState:NSOnState]

  [accessory addSubview:checkbox]
  [accessory addSubview:combobox]

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:msg]
  [alert addButtonWithTitle:'OK']
  [alert addButtonWithTitle:'Cancel']
  [alert setAccessoryView:accessory]

  var responseCode = [alert runModal]
  var combosel = [combobox indexOfSelectedItem]
  var checksel = [checkbox state] == NSOnState

  return [responseCode, combosel, checksel]
}
var options = ['1x', '2x']
var choice = createSelect('What resolution are you working at?', options, 1)
var labelMultiplier = choice[1] + 1
var shouldDrawSlice = choice[2]
log(choice[0])

if (choice[0] == NSAlertFirstButtonReturn) {
  //
  // Name artboards
  //

  // New group to hold labels
  var group = [[doc currentPage] addLayerOfType: 'group'];
  [group setName: groupName]

  for(var i=0; i< artboards.length(); i++){
    var artboard = artboards[i];
    var artboardName = [artboard name];

    // Create label and set properties
    var textLayer = [group addLayerOfType: 'text'];
    [textLayer setName: artboardName];
    [textLayer setStringValue: artboardName];
    [textLayer setFontSize: 14 * labelMultiplier];
    [textLayer setFontPostscriptName: 'Helvetica Neue'];
    [textLayer setLineSpacing: 16 * labelMultiplier];

    var color = [[MSColor alloc] init];
    [color setRed: 188/255];
    [color setGreen: 188/255];
    [color setBlue: 188/255];
    [color setAlpha: 1.0];
    [textLayer setTextColor: color];

    // Position label approximately where it is in Sketch
    [[textLayer frame] setX:[[artboard frame] x] + (2 * labelMultiplier)];
    [[textLayer frame] setY:[[artboard frame] y] - [[textLayer frame] height] - (4 * labelMultiplier)];
  }

  // Select each layer to make group the size of the layers within
  groupLayers = [group layers];
  for(var i=0; i< groupLayers.length(); i++){
    var layer = [groupLayers objectAtIndex:i];
    [layer select:true byExpandingSelection:false];
  }

  // Lock group
  [group setIsLocked:true];
  [doc showMessage: [groupLayers count] + ' artboard labels created in "Artboard labels" group.'];

  // Draw slice

  if (shouldDrawSlice) {

    // draw slice
    var slice = [MSSliceLayer new];
    var padding = 200;

	var bounds=MSLayerGroup.groupBoundsForLayers(artboards);

    [[slice frame] setX:bounds.x() - padding];
    [[slice frame] setY:bounds.y() - padding];
    [[slice frame] setWidth:bounds.width() + (padding*2)];
    [[slice frame] setHeight:bounds.height() + (padding*2)];

    [group addSlice: slice];
    [[doc currentView] refresh];

  }
}